{"ast":null,"code":"var _jsxFileName = \"/Users/dorian.gloinec/Documents/GitHub/HR-Review/frontend/src/components/maincontent/EmployeeContent.js\",\n  _s = $RefreshSig$();\nimport { PencilSquareIcon, TrashIcon } from \"@heroicons/react/24/solid\";\nimport React, { useState, useCallback } from \"react\";\nimport exportToCSV from \"utils/csvExport\";\nimport TablePagination from \"utils/TablePagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmployeeTable() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalRow, setTotalRow] = useState(0);\n  const fetchData = useCallback(async (pageSize, pageIndex, search, order) => {\n    setLoading(true);\n    try {\n      const queryOptions = {\n        page: pageIndex,\n        limit: pageSize,\n        search: search,\n        order: order\n      };\n      const response = await getEmployeeTable(queryOptions);\n\n      // Log the API response to the console\n      console.log(\"API response:\", response);\n      if (Array.isArray(response.items)) {\n        const {\n          items,\n          columns\n        } = response; // Extract items and columns from the API response\n\n        // Calculate totalRow based on the length of the items array\n        const totalRow = items.length;\n        setTotalRow(totalRow);\n\n        // Calculate pageCount based on totalRow and pageSize\n        const pageCount = Math.ceil(totalRow / pageSize);\n        setPageCount(pageCount);\n\n        // Update data with the fetched items\n        setData(items);\n      } else {\n        console.error(\"Invalid response format from API:\", response);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const handleExportToCSV = () => {\n    exportToCSV(data, columns);\n  };\n  const columns = React.useMemo(() => [{\n    Header: \"#\",\n    accessor: \"id\",\n    Cell: ({\n      row\n    }) => `#${row.original.id}`,\n    disableSortBy: true\n  }, {\n    Header: \"Name\",\n    accessor: \"name\"\n  }, {\n    Header: \"Email\",\n    accessor: \"email\"\n  }, {\n    Header: \"Level\",\n    accessor: \"level\"\n  }, {\n    Header: \"Location\",\n    accessor: \"location\"\n  }, {\n    Header: \"Department\",\n    accessor: \"department\"\n  }, {\n    Header: \"Division\",\n    accessor: \"division\"\n  }, {\n    Header: \"Position\",\n    accessor: \"position\"\n  }, {\n    Header: \"Salary\",\n    accessor: \"salary\"\n  }, {\n    Header: \"Currency\",\n    accessor: \"currency\"\n  }, {\n    Header: \"Salary Timebase\",\n    accessor: \"salary_timebase\"\n  }, {\n    Header: \"Hire Date\",\n    accessor: \"hire_date\"\n  }, {\n    Header: \"Action\",\n    accessor: ({\n      row\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-xs btn-info\",\n          children: /*#__PURE__*/_jsxDEV(PencilSquareIcon, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-xs btn-error\",\n          children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this);\n    }\n  }], []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"EmployeeTable\",\n    children: [/*#__PURE__*/_jsxDEV(TablePagination, {\n      columns: columns,\n      data: data,\n      fetchData: fetchData,\n      loading: loading,\n      pageCount: pageCount,\n      totalRow: totalRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportToCSV,\n        className: \"btn btn-primary\",\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(EmployeeTable, \"Y1yho+Z929AT3fg9bjgHuKItvvI=\");\n_c = EmployeeTable;\nexport default EmployeeTable;\nvar _c;\n$RefreshReg$(_c, \"EmployeeTable\");","map":{"version":3,"names":["PencilSquareIcon","TrashIcon","React","useState","useCallback","exportToCSV","TablePagination","jsxDEV","_jsxDEV","EmployeeTable","_s","data","setData","loading","setLoading","pageCount","setPageCount","totalRow","setTotalRow","fetchData","pageSize","pageIndex","search","order","queryOptions","page","limit","response","getEmployeeTable","console","log","Array","isArray","items","columns","length","Math","ceil","error","handleExportToCSV","useMemo","Header","accessor","Cell","row","original","id","disableSortBy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/dorian.gloinec/Documents/GitHub/HR-Review/frontend/src/components/maincontent/EmployeeContent.js"],"sourcesContent":["import { PencilSquareIcon, TrashIcon } from \"@heroicons/react/24/solid\";\nimport React, { useState, useCallback } from \"react\";\nimport exportToCSV from \"utils/csvExport\";\nimport TablePagination from \"utils/TablePagination\";\n\nfunction EmployeeTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalRow, setTotalRow] = useState(0);\n\n  const fetchData = useCallback(\n    async (pageSize, pageIndex, search, order) => {\n      setLoading(true);\n      try {\n        const queryOptions = {\n          page: pageIndex,\n          limit: pageSize,\n          search: search,\n          order: order,\n        };\n        const response = await getEmployeeTable(queryOptions);\n  \n        // Log the API response to the console\n        console.log(\"API response:\", response);\n  \n        if (Array.isArray(response.items)) {\n          const { items, columns } = response; // Extract items and columns from the API response\n  \n          // Calculate totalRow based on the length of the items array\n          const totalRow = items.length;\n          setTotalRow(totalRow);\n  \n          // Calculate pageCount based on totalRow and pageSize\n          const pageCount = Math.ceil(totalRow / pageSize);\n          setPageCount(pageCount);\n  \n          // Update data with the fetched items\n          setData(items);\n        } else {\n          console.error(\"Invalid response format from API:\", response);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n  \n  const handleExportToCSV = () => {\n    exportToCSV(data, columns);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"#\",\n        accessor: \"id\",\n        Cell: ({ row }) => `#${row.original.id}`,\n        disableSortBy: true,\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"Email\",\n        accessor: \"email\",\n      },\n      {\n        Header: \"Level\",\n        accessor: \"level\",\n      },\n      {\n        Header: \"Location\",\n        accessor: \"location\",\n      },\n      {\n        Header: \"Department\",\n        accessor: \"department\",\n      },\n      {\n        Header: \"Division\",\n        accessor: \"division\",\n      },\n      {\n        Header: \"Position\",\n        accessor: \"position\",\n      },\n      {\n        Header: \"Salary\",\n        accessor: \"salary\",\n      },\n      {\n        Header: \"Currency\",\n        accessor: \"currency\",\n      },\n      {\n        Header: \"Salary Timebase\",\n        accessor: \"salary_timebase\",\n      },\n      {\n        Header: \"Hire Date\",\n        accessor: \"hire_date\",\n      },\n      {\n        Header: \"Action\",\n        accessor: ({ row }) => {\n          return (\n            <div className=\"flex gap-2\">\n              <button className=\"btn btn-xs btn-info\">\n                <PencilSquareIcon className=\"w-4 h-4\" />\n              </button>\n              <button className=\"btn btn-xs btn-error\">\n                <TrashIcon className=\"w-4 h-4\" />\n              </button>\n            </div>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  return (\n    <section id=\"EmployeeTable\">\n\n      <TablePagination\n        columns={columns}\n        data={data}\n        fetchData={fetchData}\n        loading={loading}\n        pageCount={pageCount}\n        totalRow={totalRow}\n      />\n      <div className=\"mb-4\">\n        <br/>\n        <button onClick={handleExportToCSV} className=\"btn btn-primary\">Export to CSV</button>\n      </div>\n    </section>\n  );\n}\n\nexport default EmployeeTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}