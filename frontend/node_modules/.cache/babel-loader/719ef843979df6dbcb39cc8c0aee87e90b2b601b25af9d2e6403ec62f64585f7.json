{"ast":null,"code":"var _jsxFileName = \"/Users/dorian.gloinec/Documents/GitHub/review-app/frontend/src/components/maincontent/EmployeeContent.js\",\n  _s = $RefreshSig$();\nimport { getEmployeeTable, deleteEmployee } from \"services/APIEmployee\";\nimport TablePagination from \"utils/TablePagination\";\nimport { PencilSquareIcon, TrashIcon } from \"@heroicons/react/24/solid\";\nimport React, { useState, useCallback } from \"react\";\nimport exportToCSV from \"utils/csvExport\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmployeeTable() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalRow, setTotalRow] = useState(0);\n  const [pageSize, setPageSize] = useState(10);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [search, setSearch] = useState('');\n  const [order, setOrder] = useState('');\n  const [data, setData] = useState([]);\n  const fetchData = useCallback(async (pageSize, pageIndex, search, order) => {\n    setLoading(true);\n    try {\n      const queryOptions = {\n        page: pageIndex,\n        limit: pageSize,\n        search: search,\n        order: order\n      };\n      const items = await getEmployeeTable(queryOptions);\n      if (Array.isArray(items)) {\n        const totalRow = items.length;\n        setTotalRow(totalRow);\n        const pageCount = Math.ceil(totalRow / pageSize);\n        setPageCount(pageCount);\n        setData(items); // Update data state with fetched items\n      } else {\n        console.error(\"Invalid response format from API:\", items);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const handleExportToCSV = async () => {\n    try {\n      // Fetch all data from the API\n      const response = await getEmployeeTable({\n        page: 0,\n        limit: totalRow\n      });\n\n      // Check if response is valid\n      if (Array.isArray(response)) {\n        // Exclude the \"Action\" column from the export\n        const filteredColumns = columns.filter(column => column.accessor !== \"action\");\n\n        // Check if all objects in response array have the 'id' property defined\n        if (response.every(obj => obj.hasOwnProperty('id'))) {\n          exportToCSV(response, filteredColumns);\n        } else {\n          console.error(\"Some objects in data array do not have the 'id' property defined.\");\n        }\n      } else {\n        console.error(\"Invalid response format from API:\", response);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      // Make the API call to delete the record with the given ID\n      await deleteEmployee(id);\n\n      // After successful deletion, fetch updated data from the API\n      fetchData(pageSize, pageIndex, search, order);\n    } catch (error) {\n      console.error(\"Error deleting record:\", error);\n    }\n  };\n  const columns = React.useMemo(() => [\n    // Define your table columns here\n  ], []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"EmployeeTable\",\n    children: [/*#__PURE__*/_jsxDEV(TablePagination, {\n      columns: columns,\n      data: data // Pass data state to the table\n      ,\n      fetchData: fetchData,\n      loading: loading,\n      pageCount: pageCount,\n      totalRow: totalRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportToCSV,\n        className: \"btn btn-primary\",\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(EmployeeTable, \"gd6sgNJi2QiR/sPKk9vFfWdw/t4=\");\n_c = EmployeeTable;\nexport default EmployeeTable;\nvar _c;\n$RefreshReg$(_c, \"EmployeeTable\");","map":{"version":3,"names":["getEmployeeTable","deleteEmployee","TablePagination","PencilSquareIcon","TrashIcon","React","useState","useCallback","exportToCSV","jsxDEV","_jsxDEV","EmployeeTable","_s","loading","setLoading","pageCount","setPageCount","totalRow","setTotalRow","pageSize","setPageSize","pageIndex","setPageIndex","search","setSearch","order","setOrder","data","setData","fetchData","queryOptions","page","limit","items","Array","isArray","length","Math","ceil","console","error","handleExportToCSV","response","filteredColumns","columns","filter","column","accessor","every","obj","hasOwnProperty","handleDelete","id","useMemo","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/Users/dorian.gloinec/Documents/GitHub/review-app/frontend/src/components/maincontent/EmployeeContent.js"],"sourcesContent":["import { getEmployeeTable, deleteEmployee } from \"services/APIEmployee\";\nimport TablePagination from \"utils/TablePagination\";\nimport { PencilSquareIcon, TrashIcon } from \"@heroicons/react/24/solid\";\nimport React, { useState, useCallback } from \"react\";\nimport  exportToCSV  from \"utils/csvExport\";\n\nfunction EmployeeTable() {\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalRow, setTotalRow] = useState(0);\n  const [pageSize, setPageSize] = useState(10);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [search, setSearch] = useState('');\n  const [order, setOrder] = useState('');\n  const [data, setData] = useState([]);\n\n  const fetchData = useCallback(\n    async (pageSize, pageIndex, search, order) => {\n      setLoading(true);\n      try {\n        const queryOptions = {\n          page: pageIndex,\n          limit: pageSize,\n          search: search,\n          order: order,\n        };\n        const items = await getEmployeeTable(queryOptions);\n\n        if (Array.isArray(items)) {\n          const totalRow = items.length;\n          setTotalRow(totalRow);\n\n          const pageCount = Math.ceil(totalRow / pageSize);\n          setPageCount(pageCount);\n\n          setData(items); // Update data state with fetched items\n        } else {\n          console.error(\"Invalid response format from API:\", items);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n  \n  const handleExportToCSV = async () => {\n    try {\n      // Fetch all data from the API\n      const response = await getEmployeeTable({ page: 0, limit: totalRow });\n    \n      // Check if response is valid\n      if (Array.isArray(response)) {\n        // Exclude the \"Action\" column from the export\n        const filteredColumns = columns.filter(column => column.accessor !== \"action\");\n    \n        // Check if all objects in response array have the 'id' property defined\n        if (response.every(obj => obj.hasOwnProperty('id'))) {\n          exportToCSV(response, filteredColumns);\n        } else {\n          console.error(\"Some objects in data array do not have the 'id' property defined.\");\n        }\n      } else {\n        console.error(\"Invalid response format from API:\", response);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      // Make the API call to delete the record with the given ID\n      await deleteEmployee(id);\n      \n      // After successful deletion, fetch updated data from the API\n      fetchData(pageSize, pageIndex, search, order);\n    } catch (error) {\n      console.error(\"Error deleting record:\", error);\n    }\n  };\n  \n  const columns = React.useMemo(\n    () => [\n      // Define your table columns here\n    ],\n    []\n  );\n\n  return (\n    <section id=\"EmployeeTable\">\n      <TablePagination\n        columns={columns}\n        data={data} // Pass data state to the table\n        fetchData={fetchData}\n        loading={loading}\n        pageCount={pageCount}\n        totalRow={totalRow}\n      />\n      <div className=\"mb-4\">\n        <br/>\n        <button onClick={handleExportToCSV} className=\"btn btn-primary\">Export to CSV</button>\n      </div>\n    </section>\n  );\n}\n\nexport default EmployeeTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}