{"ast":null,"code":"function exportToCSV(data, columns) {\n  // Debugging: Log data and columns\n  console.log(\"Data for CSV export:\", data);\n  console.log(\"Columns:\", columns);\n\n  // Check if data array is empty\n  if (data.length === 0) {\n    // Send notification to browser\n    alert(\"No data available to export.\");\n    return; // Exit function\n  }\n  const csvContent = [columns.map(column => column.Header).join(\",\"), ...data.map(row => columns.map(column => {\n    console.log(\"Row values:\", row.values); // Debugging: Log row values\n    return row.values[column.accessor];\n  }).join(\",\"))].join(\"\\n\");\n  console.log(\"CSV Content:\", csvContent); // Debugging: Log CSV content\n\n  const blob = new Blob([csvContent], {\n    type: \"text/csv;charset=utf-8;\"\n  });\n  const link = document.createElement(\"a\");\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", \"table_data.csv\");\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\nexport default exportToCSV;","map":{"version":3,"names":["exportToCSV","data","columns","console","log","length","alert","csvContent","map","column","Header","join","row","values","accessor","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild"],"sources":["/Users/dorian.gloinec/Documents/GitHub/HR-Review/frontend/src/utils/csvExport.js"],"sourcesContent":["function exportToCSV(data, columns) {\n    // Debugging: Log data and columns\n    console.log(\"Data for CSV export:\", data);\n    console.log(\"Columns:\", columns);\n  \n    // Check if data array is empty\n    if (data.length === 0) {\n      // Send notification to browser\n      alert(\"No data available to export.\");\n      return; // Exit function\n    }\n  \n    const csvContent = [\n      columns.map((column) => column.Header).join(\",\"),\n      ...data.map((row) =>\n        columns.map((column) => {\n          console.log(\"Row values:\", row.values); // Debugging: Log row values\n          return row.values[column.accessor];\n        }).join(\",\")\n      ),\n    ].join(\"\\n\");\n  \n    console.log(\"CSV Content:\", csvContent); // Debugging: Log CSV content\n  \n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"table_data.csv\");\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n\n  export default exportToCSV;"],"mappings":"AAAA,SAASA,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAChC;EACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,IAAI,CAAC;EACzCE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,OAAO,CAAC;;EAEhC;EACA,IAAID,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;IACrB;IACAC,KAAK,CAAC,8BAA8B,CAAC;IACrC,OAAO,CAAC;EACV;EAEA,MAAMC,UAAU,GAAG,CACjBL,OAAO,CAACM,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAChD,GAAGV,IAAI,CAACO,GAAG,CAAEI,GAAG,IACdV,OAAO,CAACM,GAAG,CAAEC,MAAM,IAAK;IACtBN,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEQ,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC;IACxC,OAAOD,GAAG,CAACC,MAAM,CAACJ,MAAM,CAACK,QAAQ,CAAC;EACpC,CAAC,CAAC,CAACH,IAAI,CAAC,GAAG,CACb,CAAC,CACF,CAACA,IAAI,CAAC,IAAI,CAAC;EAEZR,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEG,UAAU,CAAC,CAAC,CAAC;;EAEzC,MAAMQ,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACT,UAAU,CAAC,EAAE;IAAEU,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxC,IAAIF,IAAI,CAACG,QAAQ,KAAKC,SAAS,EAAE;IAC/B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACV,IAAI,CAAC;IACrCG,IAAI,CAACQ,YAAY,CAAC,MAAM,EAAEH,GAAG,CAAC;IAC9BL,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAE,gBAAgB,CAAC;IAC/CR,IAAI,CAACS,KAAK,CAACC,UAAU,GAAG,QAAQ;IAChCT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,IAAI,CAAC;IAC/BA,IAAI,CAACa,KAAK,CAAC,CAAC;IACZZ,QAAQ,CAACU,IAAI,CAACG,WAAW,CAACd,IAAI,CAAC;EACjC;AACF;AAEA,eAAelB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}