{"ast":null,"code":"var _jsxFileName = \"/Users/dorian.gloinec/Documents/GitHub/review-app/frontend/src/components/maincontent/EmployeeContent.js\",\n  _s = $RefreshSig$();\nimport { getEmployeeTable } from \"services/APIEmployee\";\nimport TablePagination from \"utils/TablePagination\";\nimport { PencilSquareIcon, TrashIcon } from \"@heroicons/react/24/solid\";\nimport React, { useState, useCallback } from \"react\";\nimport exportToCSV from \"utils/csvExport\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmployeeTable() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalRow, setTotalRow] = useState(0);\n  const fetchData = useCallback(async (pageSize, pageIndex, search, order) => {\n    setLoading(true);\n    try {\n      const queryOptions = {\n        page: pageIndex,\n        limit: pageSize,\n        search: search,\n        order: order\n      };\n      const items = await getEmployeeTable(queryOptions);\n\n      // Log the API response to the console\n      console.log(\"API response:\", items);\n\n      // Check if items is an array\n      if (Array.isArray(items)) {\n        // Calculate totalRow based on the length of the items array\n        const totalRow = items.length;\n        setTotalRow(totalRow);\n\n        // Calculate pageCount based on totalRow and pageSize\n        const pageCount = Math.ceil(totalRow / pageSize);\n        setPageCount(pageCount);\n\n        // Slice the items array based on pagination parameters\n        const startIndex = pageIndex * pageSize;\n        const endIndex = startIndex + pageSize;\n        const slicedItems = items.slice(startIndex, endIndex);\n\n        // Update data with the sliced items\n        setData(slicedItems);\n      } else {\n        console.error(\"Invalid response format from API:\", items);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const handleExportToCSV = async columns => {\n    try {\n      // Fetch all data from the API\n      const response = await getEmployeeTable();\n\n      // Check if response is valid\n      if (Array.isArray(response)) {\n        // Exclude the \"Action\" column from the export\n        const filteredColumns = columns.filter(column => column.accessor !== \"action\");\n\n        // Check if all objects in response array have the 'id' property defined\n        if (response.every(obj => obj.hasOwnProperty('id'))) {\n          exportToCSV(response, filteredColumns);\n        } else {\n          console.error(\"Some objects in data array do not have the 'id' property defined.\");\n        }\n      } else {\n        console.error(\"Invalid response format from API:\", response);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const columns = React.useMemo(() => [{\n    Header: \"id\",\n    accessor: \"id\",\n    disableSortBy: true\n  }, {\n    Header: \"Name\",\n    accessor: \"name\"\n  }, {\n    Header: \"Email\",\n    accessor: \"email\"\n  }, {\n    Header: \"Level\",\n    accessor: \"level\"\n  }, {\n    Header: \"Location\",\n    accessor: \"location\"\n  }, {\n    Header: \"Department\",\n    accessor: \"department\"\n  }, {\n    Header: \"Division\",\n    accessor: \"division\"\n  }, {\n    Header: \"Position\",\n    accessor: \"position\"\n  }, {\n    Header: \"Salary\",\n    accessor: \"salary\"\n  }, {\n    Header: \"Currency\",\n    accessor: \"currency\"\n  }, {\n    Header: \"Salary Timebase\",\n    accessor: \"salary_timebase\"\n  }, {\n    Header: \"Hire Date\",\n    accessor: \"hire_date\"\n  }, {\n    Header: \"Action\",\n    accessor: ({\n      row\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-xs btn-info\",\n          children: /*#__PURE__*/_jsxDEV(PencilSquareIcon, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-xs btn-error\",\n          children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this);\n    }\n  }], []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"EmployeeTable\",\n    children: [/*#__PURE__*/_jsxDEV(TablePagination, {\n      columns: columns,\n      data: data,\n      fetchData: fetchData,\n      loading: loading,\n      pageCount: pageCount,\n      totalRow: totalRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleExportToCSV(columns),\n        className: \"btn btn-primary\",\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(EmployeeTable, \"Y1yho+Z929AT3fg9bjgHuKItvvI=\");\n_c = EmployeeTable;\nexport default EmployeeTable;\nvar _c;\n$RefreshReg$(_c, \"EmployeeTable\");","map":{"version":3,"names":["getEmployeeTable","TablePagination","PencilSquareIcon","TrashIcon","React","useState","useCallback","exportToCSV","jsxDEV","_jsxDEV","EmployeeTable","_s","data","setData","loading","setLoading","pageCount","setPageCount","totalRow","setTotalRow","fetchData","pageSize","pageIndex","search","order","queryOptions","page","limit","items","console","log","Array","isArray","length","Math","ceil","startIndex","endIndex","slicedItems","slice","error","handleExportToCSV","columns","response","filteredColumns","filter","column","accessor","every","obj","hasOwnProperty","useMemo","Header","disableSortBy","row","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["/Users/dorian.gloinec/Documents/GitHub/review-app/frontend/src/components/maincontent/EmployeeContent.js"],"sourcesContent":["import { getEmployeeTable } from \"services/APIEmployee\";\nimport TablePagination from \"utils/TablePagination\";\nimport { PencilSquareIcon, TrashIcon } from \"@heroicons/react/24/solid\";\nimport React, { useState, useCallback } from \"react\";\nimport  exportToCSV  from \"utils/csvExport\";\n\nfunction EmployeeTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalRow, setTotalRow] = useState(0);\n\n  const fetchData = useCallback(\n    async (pageSize, pageIndex, search, order) => {\n      setLoading(true);\n      try {\n        const queryOptions = {\n          page: pageIndex,\n          limit: pageSize,\n          search: search,\n          order: order,\n        };\n        const items = await getEmployeeTable(queryOptions);\n\n        // Log the API response to the console\n        console.log(\"API response:\", items);\n\n        // Check if items is an array\n        if (Array.isArray(items)) {\n          // Calculate totalRow based on the length of the items array\n          const totalRow = items.length;\n          setTotalRow(totalRow);\n\n          // Calculate pageCount based on totalRow and pageSize\n          const pageCount = Math.ceil(totalRow / pageSize);\n          setPageCount(pageCount);\n\n          // Slice the items array based on pagination parameters\n          const startIndex = pageIndex * pageSize;\n          const endIndex = startIndex + pageSize;\n          const slicedItems = items.slice(startIndex, endIndex);\n\n          // Update data with the sliced items\n          setData(slicedItems);\n        } else {\n          console.error(\"Invalid response format from API:\", items);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n  \n  const handleExportToCSV = async (columns) => {\n    try {\n      // Fetch all data from the API\n      const response = await getEmployeeTable();\n    \n      // Check if response is valid\n      if (Array.isArray(response)) {\n        // Exclude the \"Action\" column from the export\n        const filteredColumns = columns.filter(column => column.accessor !== \"action\");\n    \n        // Check if all objects in response array have the 'id' property defined\n        if (response.every(obj => obj.hasOwnProperty('id'))) {\n          exportToCSV(response, filteredColumns);\n        } else {\n          console.error(\"Some objects in data array do not have the 'id' property defined.\");\n        }\n      } else {\n        console.error(\"Invalid response format from API:\", response);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  \n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"id\",\n        accessor: \"id\",\n        disableSortBy: true,\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"Email\",\n        accessor: \"email\",\n      },\n      {\n        Header: \"Level\",\n        accessor: \"level\",\n      },\n      {\n        Header: \"Location\",\n        accessor: \"location\",\n      },\n      {\n        Header: \"Department\",\n        accessor: \"department\",\n      },\n      {\n        Header: \"Division\",\n        accessor: \"division\",\n      },\n      {\n        Header: \"Position\",\n        accessor: \"position\",\n      },\n      {\n        Header: \"Salary\",\n        accessor: \"salary\",\n      },\n      {\n        Header: \"Currency\",\n        accessor: \"currency\",\n      },\n      {\n        Header: \"Salary Timebase\",\n        accessor: \"salary_timebase\",\n      },\n      {\n        Header: \"Hire Date\",\n        accessor: \"hire_date\",\n      },\n      {\n        Header: \"Action\",\n        accessor: ({ row }) => {\n          return (\n            <div className=\"flex gap-2\">\n              <button className=\"btn btn-xs btn-info\">\n                <PencilSquareIcon className=\"w-4 h-4\" />\n              </button>\n              <button className=\"btn btn-xs btn-error\">\n                <TrashIcon className=\"w-4 h-4\" />\n              </button>\n            </div>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  return (\n    <section id=\"EmployeeTable\">\n      <TablePagination\n        columns={columns}\n        data={data}\n        fetchData={fetchData}\n        loading={loading}\n        pageCount={pageCount}\n        totalRow={totalRow}\n      />\n      <div className=\"mb-4\">\n        <br/>\n        <button onClick={() => handleExportToCSV(columns)} className=\"btn btn-primary\">Export to CSV</button>\n      </div>\n    </section>\n  );\n}\n\nexport default EmployeeTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}